import os
import re
import json
import httpx
import logging
import asyncio
import aiohttp
import datetime
import uuid
from bs4 import BeautifulSoup
from starlette.requests import Request
from fastapi.responses import Response, JSONResponse
from fetch import fetch_html_with_playwright
from extractors import extract_property_code, extract_property_code_from_message
from fastapi import FastAPI, HTTPException, Request, BackgroundTasks, Depends, Query
from starlette.middleware.base import BaseHTTPMiddleware
from starlette.responses import Response
from cachetools import TTLCache
from exceptions import http_exception_handler, custom_exception_handler

# ---------------------------------------------------
# Configura√ß√£o e vari√°veis globais
# ---------------------------------------------------
logging.basicConfig(level=logging.INFO, format="%(asctime)s - %(levelname)s - %(message)s")
logging.info("API Iniciada!")

VERIFY_TOKEN = os.getenv("VERIFY_TOKEN", "token-bothub-redeurbana#2025")
XML_URL = "https://redeurbana.com.br/imoveis/publico/97b375b0-05d4-48f5-9aeb-e9a1cae78c90"

# Cache para armazenar o XML por 12 horas (43200 segundos)
xml_cache = TTLCache(maxsize=1, ttl=43200)  # 12 horas

# ---------------------------------------------------
# Fun√ß√µes auxiliares para atualiza√ß√£o do XML
# ---------------------------------------------------

def seconds_until_next_update(update_times: list) -> float:
    """
    Recebe uma lista de hor√°rios (objetos datetime.time) e retorna os segundos at√© o pr√≥ximo hor√°rio.
    Exemplo: [datetime.time(14, 30), datetime.time(2, 30)]
    """
    now = datetime.datetime.now()
    today = now.date()
    
    # Combina cada objeto datetime.time com a data de hoje
    scheduled_times = [datetime.datetime.combine(today, ut) for ut in update_times]
    
    # Filtra os hor√°rios que ainda n√£o passaram hoje
    future_times = [t for t in scheduled_times if t > now]
    
    if future_times:
        next_time = min(future_times)
    else:
        # Se todos os hor√°rios de hoje j√° passaram, o pr√≥ximo ser√° o primeiro do dia seguinte
        next_time = datetime.datetime.combine(today + datetime.timedelta(days=1), update_times[0])
    
    return (next_time - now).total_seconds()

async def update_xml_cache():
    """
    Faz a requisi√ß√£o para baixar o XML e atualiza o cache.
    Timeout ajustado para 600 segundos para suportar XML lento.
    """
    try:
        async with aiohttp.ClientSession() as session:
            async with session.get(XML_URL, timeout=600) as response:
                response.raise_for_status()
                xml_data = await response.text()
                xml_cache["xml_data"] = xml_data
                logging.info("XML atualizado no cache.")
                return xml_data
    except Exception as e:
        logging.error(f"Erro ao atualizar XML: {e}")
        # Aqui voc√™ pode optar por retornar None ou lan√ßar uma exce√ß√£o
        return None

# Fun√ß√£o para agendar a atualiza√ß√£o do cache em hor√°rios espec√≠ficos (por exemplo, √†s 08:00 e √†s 20:00)
async def scheduled_xml_update():
    # Atualiza o cache √†s 11:30 e √†s 23:30
    update_times = [datetime.time(14, 13), datetime.time(2, 30)]
    while True:
        delay = seconds_until_next_update(update_times)
        logging.info(f"Aguardando {delay/60:.2f} minutos para a pr√≥xima atualiza√ß√£o do XML.")
        await asyncio.sleep(delay)
        await update_xml_cache()

# ---------------------------------------------------
# Fun√ß√£o para manter o servidor ativo (Keep-Alive)
# ---------------------------------------------------
async def keep_alive_task():
    while True:
        await asyncio.sleep(120)
        logging.info("üí° Keep-alive: Servidor ainda est√° rodando...")

# ---------------------------------------------------
# Cria√ß√£o da inst√¢ncia FastAPI e configura√ß√£o
# ---------------------------------------------------
app = FastAPI()

# Configura√ß√£o dos handlers de erro
app.add_exception_handler(HTTPException, http_exception_handler)
app.add_exception_handler(Exception, custom_exception_handler)

# Middleware para log
class LogMiddleware(BaseHTTPMiddleware):
    async def dispatch(self, request: Request, call_next):
        logging.info(f"üîπ RECEBENDO REQUISI√á√ÉO: {request.method} {request.url}")

        try:
            body = await request.body()
            if body:
                logging.info(f"üì© Corpo da Requisi√ß√£o: {body.decode('utf-8')}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Erro ao capturar o corpo da requisi√ß√£o: {e}")

        # Processar a requisi√ß√£o
        response = await call_next(request)

        # Criar uma c√≥pia segura da resposta (para lidar com _StreamingResponse)
        response_body = b"".join([chunk async for chunk in response.body_iterator])

        try:
            logging.info(f"‚úÖ RESPOSTA: {response.status_code} - {response_body.decode()}")
        except Exception as e:
            logging.warning(f"‚ö†Ô∏è Erro ao capturar a resposta: {e}")

        return Response(
            content=response_body,
            status_code=response.status_code,
            headers=dict(response.headers),
            media_type=response.media_type,
        )

# Adiciona o middleware na API
app.add_middleware(LogMiddleware)

# ---------------------------------------------------
# Endpoints
# ---------------------------------------------------

@app.get("/webhook")
async def verify_webhook(request: Request):
    """Verifica a assinatura do webhook no WhatsApp API."""
    mode = request.query_params.get("hub.mode")
    token = request.query_params.get("hub.verify_token")
    challenge = request.query_params.get("hub.challenge")

    if mode == "subscribe" and token == VERIFY_TOKEN:
        return int(challenge)  # Responde com o desafio para validar
    else:
        return {"error": "Token inv√°lido"}, 403 

@app.get("/")
async def root():
    return {"message": "API de Im√≥veis est√° online! üöÄ"}

@app.post("/extract-url/")
async def extract_url_from_message(message: str):
    """Extrai uma URL de uma mensagem enviada pelo usu√°rio."""
    match = re.search(r"https?://[^\s]+", message)
    if match:
        # Remove barra(s) no final do URL, caso exista(m)
        url_extracted = match.group(0).rstrip('/')
        return {"url_extraida": url_extracted}
    raise HTTPException(status_code=400, detail="Nenhuma URL encontrada na mensagem.")

@app.get("/detect-site/")
async def detect_site(url: str):
    """Detecta o site a partir da URL."""
    match = re.search(r"https?://(?:www\.)?([^/.]+)", url)
    if match:
        return {"site_detectado": match.group(1)}
    raise HTTPException(status_code=400, detail="URL inv√°lida.")

# üîπ Endpoint √önico para extrair c√≥digo do im√≥vel (Otimizado)

@app.get("/extract-code-html/")
async def extract_code_html_endpoint(url: str, site: str):
    """Extrai o c√≥digo do im√≥vel o mais r√°pido poss√≠vel."""

    logging.info(f"üîç Extraindo c√≥digo do im√≥vel para URL: {url} | Site: {site}")

    try:
        html = await fetch_html_with_playwright(url)
        codigo = extract_property_code(html, site)
    
        if not codigo:
            raise HTTPException(status_code=404, detail="C√≥digo do im√≥vel n√£o encontrado.")

        return {"codigo_imovel": codigo}

    except Exception as e:
        logging.error(f"‚ùå Erro ao extrair c√≥digo: {e}")
        raise HTTPException(status_code=500, detail="Erro ao processar a requisi√ß√£o.")

@app.post("/extract-code-message/")
async def extract_code_message_endpoint(message: str):
    codigo = extract_property_code_from_message(message)
    if not codigo:
        raise HTTPException(
            status_code=400,
            detail="C√≥digo do im√≥vel n√£o encontrado na mensagem."
        )
    return codigo

# üîç Fun√ß√£o auxiliar para buscar detalhes no XML com cache
async def fetch_xml_data():
    """Retorna o XML armazenado no cache. Se o cache estiver vazio, tenta buscar o XML diretamente com um timeout maior."""
    if "xml_data" in xml_cache:
        return xml_cache.get("xml_data")

    # Se o cache estiver vazio, faz o fallback com timeout aumentado
    try:
        async with aiohttp.ClientSession() as session:
            # Timeout de 600 segundos (10 minutos) para a requisi√ß√£o direta
            async with session.get(XML_URL, timeout=600) as response:
                response.raise_for_status()
                xml_data = await response.text()
                xml_cache["xml_data"] = xml_data  # Atualiza o cache para futuras chamadas
                logging.info("XML obtido via fallback e atualizado no cache.")
                return xml_data
    except Exception as e:
        logging.error(f"Erro ao buscar XML no fallback: {e}")
        raise HTTPException(status_code=500, detail="Erro ao buscar XML.")

async def get_property_info_optimized(property_code: str, xml_data: str):
    """Busca os detalhes do im√≥vel no XML usando caching para melhor performance."""
    soup = BeautifulSoup(xml_data, "xml")
    property_info = soup.find("ListingID", string=property_code)

    if not property_info:
        raise HTTPException(status_code=404, detail="Im√≥vel n√£o encontrado no XML.")

    listing = property_info.find_parent("Listing")
    return listing.find("ContactInfo") if listing else None

# üîπ Endpoint √∫nico para obter todas as informa√ß√µes do im√≥vel
@app.get("/fetch-xml/")
async def fetch_xml(property_code: str, xml_data: str = Depends(fetch_xml_data)):
    """Retorna todas as informa√ß√µes da imobili√°ria em uma √∫nica requisi√ß√£o, usando cache para otimizar a resposta."""
    contact_info = await get_property_info_optimized(property_code, xml_data)
    if not contact_info:
        raise HTTPException(status_code=404, detail="Detalhes do im√≥vel n√£o encontrados.")

    return {
        "realtor_name": contact_info.find("Name").text if contact_info.find("Name") else "N√£o informado",
        "realtor_email": contact_info.find("Email").text if contact_info.find("Email") else "N√£o informado",
        "realtor_phone": contact_info.find("Telephone").text if contact_info.find("Telephone") else "N√£o informado",
    }

# ---------------------------------------------------
# Evento de Startup (√∫nico) para iniciar tarefas de background
# ---------------------------------------------------
@app.on_event("startup")
async def startup_event():
    asyncio.create_task(keep_alive_task())

@app.on_event("startup")
async def startup_event():
    asyncio.create_task(scheduled_xml_update())
